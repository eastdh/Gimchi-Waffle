--count_8bit.vd
LIBRARY IEEE;
USE ieee.std_logic_1164.ALL;
USE ieee.std_logic_unsigned.ALL; --use these three

ENTITY count_8bit IS
PORT (
	RESETN: IN std_logic; --reset
	CLK: IN std_logic; -- clock button

	count_out: out std_logic_vector (7 downto 0) --led output
);
END count_8bit;

ARCHITECTURE hb OF count_8bit IS

SIGNAL cnt_8bit: std_logic_vector (7 downto 0);

begin

process(resetn, clk)
begin
	if resetn='1' then
		cnt_8bit <= (others=>'0');
	elsif clk 'event and clk='1' then
		if cnt_8bit="11111111" then
			cnt_8bit <=(others=>'0');
		else
			cnt_8bit<=cnt_8bit+1;
		end if;
	end if;
end process;

count_out<=cnt_8bit;

end hb;

===========================

--COUNT_8BIT.VD

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_UNSIGNED.ALL;

ENTITY COUNT_8BIT IS
PORT(
	RESETN:IN STD_LOGIC;	--RESET
	CLK:IN STD_LOGIC;	--CLOCK BUTTON
	
	COUNT_OUT:OUT STD_LOGIC_VECTOR(7 DOWNTO 0)	--LED OUTPUT
);
END COUNT_8BIT;

ARCHITECTURE HB OF COUNT_8BIT IS

SIGNAL CNT_8BIT:STD_LOGIC_VECTOR(7 DOWNTO 0);

BEGIN

PROCESS(RESETN, CLK)
BEGIN
	IF RESETN='1' THEN
		CNT_8BIT<=(OTHERS=>'0');
	ELSIF CLK'EVENT AND CLK='1' THEN
		IF CNT_8BIT="11111111" THEN
			CNT_8BIT<=(OTHERS=>'0');
		ELSE
			CNT_8BIT<=CNT_8BIT+1;
		END IF;
	END IF;
END PROCESS;

COUNT_OUT<=CNT_8BIT;

END HB;